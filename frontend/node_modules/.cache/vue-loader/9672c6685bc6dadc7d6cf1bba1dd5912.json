{"remainingRequest":"C:\\Users\\My Pc\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\My Pc\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\src\\components\\todo_rest.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\My Pc\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\src\\components\\todo_rest.vue","mtime":1560457583436},{"path":"C:\\Users\\My Pc\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1560457563834},{"path":"C:\\Users\\My Pc\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1560457563473},{"path":"C:\\Users\\My Pc\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1560457563834},{"path":"C:\\Users\\My Pc\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1560457580480}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n  name: \"todo_comp\",\r\n  data: function() {\r\n    return {\r\n      new_todo: \"\",\r\n      todos: [{ id: 1, content: \"\", done: false }]\r\n    };\r\n  },\r\n  mounted: function() {\r\n    this.read_todo();\r\n  },\r\n  computed: {\r\n    progress: function() {\r\n      var task_done = this.todos.filter(todo => todo.done);\r\n      // console.log(task_done)\r\n      return (task_done.length / this.todos.length) * 100;\r\n    }\r\n  },\r\n  methods: {\r\n    // all the methods will be replaced with REST API call later\r\n    read_todo: function() {\r\n      this.axios\r\n        .get(this.$API_URL+\"/todo_db\")\r\n        .then(response => (this.todos = response.data));\r\n    console.log(this.$API_URL);\r\n    },\r\n    update_todo: function(\r\n      id = -1,\r\n      content = \"\",\r\n      done = false,\r\n      delete_ = false\r\n    ) {\r\n      var data = {\r\n        id: id,\r\n        content: content,\r\n        done: done,\r\n        delete: delete_\r\n      };\r\n      // console.log(data);\r\n      this.axios\r\n        .post(this.$API_URL+\"/todo_db\", data)\r\n        .then(() => this.read_todo());\r\n      //   add a delay to make sure the backend respond\r\n    },\r\n    print: function(data) {\r\n      console.log(data);\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["todo_rest.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"todo_rest.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div>\r\n    <v-container grid-list-md text-xs-center>\r\n      <v-layout align-center justify-center>\r\n        <v-flex>\r\n          <v-btn large dark color=\"green\" @click=\"read_todo()\">\r\n            <v-icon dark>refresh</v-icon>Fetch database\r\n          </v-btn>\r\n        </v-flex>\r\n        <v-progress-circular :value=\"progress\"></v-progress-circular>\r\n        <span>Progress so far</span>\r\n        <v-flex></v-flex>\r\n      </v-layout>\r\n\r\n      <v-layout align-center justify-center>\r\n        <v-flex xs8>\r\n          <!-- use v-model for 2-way binding, call method when user press enter @keyup.enter-->\r\n          <!-- <v-text-field v-model=\"new_todo\" placeholder=\"edit me\" @keyup.enter=\"add_todo()\"> -->\r\n          <v-text-field\r\n            v-model=\"new_todo\"\r\n            placeholder=\"edit me\"\r\n            label=\"New Task\"\r\n            clearable\r\n            @keydown.enter=\"update_todo(id=-1, content=new_todo, done=false, delete_=false)\"\r\n          ></v-text-field>\r\n        </v-flex>\r\n        <v-flex xs1/>\r\n        <v-flex xs1>\r\n          <v-btn\r\n            small\r\n            fab\r\n            dark\r\n            color=\"teal\"\r\n            @click=\"update_todo(id=-1, content=new_todo, done=false, delete_=false)\"\r\n          >\r\n            <v-icon dark>add</v-icon>\r\n          </v-btn>\r\n        </v-flex>\r\n      </v-layout>\r\n\r\n      <div v-for=\"(todo) in todos\" :key=\"todo.id\">\r\n        <v-layout align-center justify-center>\r\n          <v-flex xs8>\r\n            <!-- we also want to be able to directly update the existing todo, this is handled by v-model, but our database needs to be handled differently-->\r\n            <v-text-field\r\n              v-model=\"todo.content\"\r\n              :label=\"String(todo.id)\"\r\n              :disabled=\"todo.done\"\r\n              @change=\"update_todo(id=todo.id, content=todo.content, done=todo.done, delete_=false)\"\r\n            />\r\n          </v-flex>\r\n          <v-flex xs1>\r\n            <!-- when click the checkbox, the input becomes disabled -->\r\n            <!-- use @change rather than @click, the @click event happens too fast that new_val is not sent through  -->\r\n            <v-switch\r\n              v-model=\"todo.done\"\r\n              label=\"Done?\"\r\n              @change=\"update_todo(id=todo.id, content=todo.content, done=todo.done, delete_=false)\"\r\n            />\r\n          </v-flex>\r\n          <v-flex xs1>\r\n            <v-btn\r\n              small\r\n              fab\r\n              dark\r\n              color=\"error\"\r\n              @click=\"update_todo(id=todo.id, content='', done=true, delete_=true)\"\r\n            >\r\n              <v-icon dark>remove</v-icon>\r\n            </v-btn>\r\n            <v\r\n          </v-flex>\r\n        </v-layout>\r\n      </div>\r\n    </v-container>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"todo_comp\",\r\n  data: function() {\r\n    return {\r\n      new_todo: \"\",\r\n      todos: [{ id: 1, content: \"\", done: false }]\r\n    };\r\n  },\r\n  mounted: function() {\r\n    this.read_todo();\r\n  },\r\n  computed: {\r\n    progress: function() {\r\n      var task_done = this.todos.filter(todo => todo.done);\r\n      // console.log(task_done)\r\n      return (task_done.length / this.todos.length) * 100;\r\n    }\r\n  },\r\n  methods: {\r\n    // all the methods will be replaced with REST API call later\r\n    read_todo: function() {\r\n      this.axios\r\n        .get(this.$API_URL+\"/todo_db\")\r\n        .then(response => (this.todos = response.data));\r\n    console.log(this.$API_URL);\r\n    },\r\n    update_todo: function(\r\n      id = -1,\r\n      content = \"\",\r\n      done = false,\r\n      delete_ = false\r\n    ) {\r\n      var data = {\r\n        id: id,\r\n        content: content,\r\n        done: done,\r\n        delete: delete_\r\n      };\r\n      // console.log(data);\r\n      this.axios\r\n        .post(this.$API_URL+\"/todo_db\", data)\r\n        .then(() => this.read_todo());\r\n      //   add a delay to make sure the backend respond\r\n    },\r\n    print: function(data) {\r\n      console.log(data);\r\n    }\r\n  }\r\n};\r\n</script>"]}]}