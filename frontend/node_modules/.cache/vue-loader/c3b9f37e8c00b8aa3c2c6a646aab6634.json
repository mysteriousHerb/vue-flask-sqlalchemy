{"remainingRequest":"C:\\Users\\My Pc\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\My Pc\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\src\\components\\upload_download.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\My Pc\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\src\\components\\upload_download.vue","mtime":1560805253370},{"path":"C:\\Users\\My Pc\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1560457563834},{"path":"C:\\Users\\My Pc\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1560457563473},{"path":"C:\\Users\\My Pc\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1560457563834},{"path":"C:\\Users\\My Pc\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1560457580480}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport vue2Dropzone from \"vue2-dropzone\";\r\nimport \"vue2-dropzone/dist/vue2Dropzone.min.css\";\r\nimport FileSaver from \"file-saver\";\r\n\r\n// import axios from \"axios\";\r\n\r\nexport default {\r\n  name: \"upload_download\",\r\n  components: {\r\n    // https://itnext.io/vue-a-pattern-for-idiomatic-performant-component-registration-you-might-not-know-about-9f3c091846f5?gi=4351204c93b8\r\n    //  https://stackoverflow.com/questions/52038615/in-vue-js-why-do-we-have-to-export-components-after-importing-them\r\n    // https://alligator.io/vuejs/vue-dropzone/\r\n    // https://rowanwins.github.io/vue-dropzone/docs/dist/#/events\r\n    vueDropzone: vue2Dropzone\r\n  },\r\n  data: function() {\r\n    return {\r\n      // dropzone settings\r\n      dropzoneOptions: {\r\n        url: this.$API_URL + \"/upload_file\",\r\n        addRemoveLinks: true,\r\n        thumbnailWidth: 150,\r\n        maxFilesize: 0.5,\r\n        maxFiles: 4,\r\n        dictDefaultMessage: \"<i class='fa fa-cloud-upload'></i>UPLOAD ME\"\r\n      },\r\n      existing_files: [],\r\n      active_file: \"default.jpg\"\r\n    };\r\n  },\r\n  computed: {\r\n    image_location: function() {\r\n      return this.$API_URL + \"/download_file/\" + this.active_file;\r\n    }\r\n  },\r\n  mounted: function() {\r\n    this.read_existing_files();\r\n  },\r\n  methods: {\r\n    toggle: function() {\r\n      console.log(this.existing_files);\r\n      this.axios({\r\n        url: this.$API_URL + \"/verify_descriptor\",\r\n        method: \"POST\",\r\n        data: { user: \"test\", descriptor: [1, 2, 3, 4, 5, 6] }\r\n      }).then(response => {\r\n        var descriptor_json = {\r\n          descriptor_user: response.data[\"descriptor_user\"],\r\n          salt2: response.data[\"salt2\"]\r\n        };\r\n        console.log(descriptor_json);\r\n        // https://stackoverflow.com/questions/16329293/save-json-string-to-client-pc-using-html5-api\r\n        // JSON.parse() takes a JSON string and transforms it into a JavaScript object.\r\n        // JSON.stringify() takes a JavaScript object and transforms it into a JSON string.\r\n        // NOTE: Javascript object needs to be JSON (a string) to communicate\r\n        var descriptor_json = JSON.stringify(descriptor_json);\r\n        var blob = new Blob([descriptor_json], { type: \"application/json\" });\r\n        FileSaver.saveAs(blob, \"key.json\");\r\n      });\r\n    },\r\n    read_existing_files: function() {\r\n      this.axios({\r\n        url: this.$API_URL + \"/existing_files\",\r\n        method: \"GET\"\r\n      }).then(response => {\r\n        this.existing_files = response.data;\r\n      });\r\n    },\r\n\r\n    removeAllFiles: function() {\r\n      this.$refs.myVueDropzone.removeAllFiles();\r\n      console.log(this.$API_URL);\r\n    },\r\n    upload_complete: function(file) {\r\n      console.log(\"uploaded\");\r\n      console.log(file[\"name\"]);\r\n    },\r\n    remove_file: function(file) {\r\n      // https://alligator.io/vuejs/rest-api-axios/\r\n      this.axios({\r\n        url: this.$API_URL + \"/upload_file\",\r\n        method: \"POST\",\r\n        data: {\r\n          remove_file: file[\"name\"]\r\n        }\r\n      }).then(response => {});\r\n    },\r\n    download_file: function() {\r\n      // https://thewebtier.com/snippets/download-files-with-axios/\r\n      this.axios({\r\n        url: this.image_location,\r\n        method: \"GET\",\r\n        responseType: \"blob\" // important\r\n      }).then(response => {\r\n        // CORS headings - see backend\r\n        var filename = response.headers[\"x-suggested-filename\"];\r\n        var filetype = response.headers[\"x-suggested-filetype\"];\r\n\r\n        // var blob = new Blob([response.data], { type: \"image/png\" });\r\n        FileSaver.saveAs(new Blob([response.data]), filename + \".\" + filetype);\r\n      });\r\n    },\r\n    change_file: function(name) {\r\n      this.active_file = name;\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["upload_download.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"upload_download.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div>\r\n    <v-container grid-list-md text-xs-center fluid>\r\n      <v-layout align-center justify-center>\r\n        <v-flex xs12>\r\n          <vueDropzone\r\n            ref=\"myVueDropzone\"\r\n            id=\"myVueDropzone\"\r\n            @vdropzone-success=\"upload_complete\"\r\n            @vdropzone-removed-file=\"remove_file\"\r\n            :options=\"dropzoneOptions\"\r\n            :useCustomSlot=\"true\"\r\n          >\r\n            <div class=\"dropzone-custom-content\">\r\n              <h3 class=\"dropzone-custom-title\">Drag and drop to upload content!</h3>\r\n              <div class=\"subtitle\">...or click to select a file from your computer</div>\r\n            </div>\r\n          </vueDropzone>\r\n        </v-flex>\r\n      </v-layout>\r\n      <v-layout>\r\n        <v-flex>\r\n          <!-- custom function called with buttons -->\r\n          <v-btn @click=\"removeAllFiles\">Remove All Files</v-btn>\r\n\r\n          <v-btn @click=\"download_file\">Download file</v-btn>\r\n          <v-btn @click=\"toggle\">toggle</v-btn>\r\n        </v-flex>\r\n      </v-layout>\r\n      <br>\r\n      <v-layout align-center justify-center>\r\n        <v-flex xs10>\r\n          <!-- use :key to actively refresh this component https://michaelnthiessen.com/force-re-render -->\r\n          <v-img :src=\"image_location\" :key=\"active_file\"/>\r\n        </v-flex>\r\n      </v-layout>\r\n\r\n      <v-layout align-center justify-center>\r\n        <v-flex xs4>\r\n          <v-list>\r\n            <v-list-tile v-for=\"file in existing_files\" :key=\"file\" @click=\"change_file(file)\">\r\n              <v-list-tile-content>\r\n                <v-list-tile-title v-text=\"file\"></v-list-tile-title>\r\n              </v-list-tile-content>\r\n            </v-list-tile>\r\n          </v-list>\r\n        </v-flex>\r\n      </v-layout>\r\n    </v-container>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport vue2Dropzone from \"vue2-dropzone\";\r\nimport \"vue2-dropzone/dist/vue2Dropzone.min.css\";\r\nimport FileSaver from \"file-saver\";\r\n\r\n// import axios from \"axios\";\r\n\r\nexport default {\r\n  name: \"upload_download\",\r\n  components: {\r\n    // https://itnext.io/vue-a-pattern-for-idiomatic-performant-component-registration-you-might-not-know-about-9f3c091846f5?gi=4351204c93b8\r\n    //  https://stackoverflow.com/questions/52038615/in-vue-js-why-do-we-have-to-export-components-after-importing-them\r\n    // https://alligator.io/vuejs/vue-dropzone/\r\n    // https://rowanwins.github.io/vue-dropzone/docs/dist/#/events\r\n    vueDropzone: vue2Dropzone\r\n  },\r\n  data: function() {\r\n    return {\r\n      // dropzone settings\r\n      dropzoneOptions: {\r\n        url: this.$API_URL + \"/upload_file\",\r\n        addRemoveLinks: true,\r\n        thumbnailWidth: 150,\r\n        maxFilesize: 0.5,\r\n        maxFiles: 4,\r\n        dictDefaultMessage: \"<i class='fa fa-cloud-upload'></i>UPLOAD ME\"\r\n      },\r\n      existing_files: [],\r\n      active_file: \"default.jpg\"\r\n    };\r\n  },\r\n  computed: {\r\n    image_location: function() {\r\n      return this.$API_URL + \"/download_file/\" + this.active_file;\r\n    }\r\n  },\r\n  mounted: function() {\r\n    this.read_existing_files();\r\n  },\r\n  methods: {\r\n    toggle: function() {\r\n      console.log(this.existing_files);\r\n      this.axios({\r\n        url: this.$API_URL + \"/verify_descriptor\",\r\n        method: \"POST\",\r\n        data: { user: \"test\", descriptor: [1, 2, 3, 4, 5, 6] }\r\n      }).then(response => {\r\n        var descriptor_json = {\r\n          descriptor_user: response.data[\"descriptor_user\"],\r\n          salt2: response.data[\"salt2\"]\r\n        };\r\n        console.log(descriptor_json);\r\n        // https://stackoverflow.com/questions/16329293/save-json-string-to-client-pc-using-html5-api\r\n        // JSON.parse() takes a JSON string and transforms it into a JavaScript object.\r\n        // JSON.stringify() takes a JavaScript object and transforms it into a JSON string.\r\n        // NOTE: Javascript object needs to be JSON (a string) to communicate\r\n        var descriptor_json = JSON.stringify(descriptor_json);\r\n        var blob = new Blob([descriptor_json], { type: \"application/json\" });\r\n        FileSaver.saveAs(blob, \"key.json\");\r\n      });\r\n    },\r\n    read_existing_files: function() {\r\n      this.axios({\r\n        url: this.$API_URL + \"/existing_files\",\r\n        method: \"GET\"\r\n      }).then(response => {\r\n        this.existing_files = response.data;\r\n      });\r\n    },\r\n\r\n    removeAllFiles: function() {\r\n      this.$refs.myVueDropzone.removeAllFiles();\r\n      console.log(this.$API_URL);\r\n    },\r\n    upload_complete: function(file) {\r\n      console.log(\"uploaded\");\r\n      console.log(file[\"name\"]);\r\n    },\r\n    remove_file: function(file) {\r\n      // https://alligator.io/vuejs/rest-api-axios/\r\n      this.axios({\r\n        url: this.$API_URL + \"/upload_file\",\r\n        method: \"POST\",\r\n        data: {\r\n          remove_file: file[\"name\"]\r\n        }\r\n      }).then(response => {});\r\n    },\r\n    download_file: function() {\r\n      // https://thewebtier.com/snippets/download-files-with-axios/\r\n      this.axios({\r\n        url: this.image_location,\r\n        method: \"GET\",\r\n        responseType: \"blob\" // important\r\n      }).then(response => {\r\n        // CORS headings - see backend\r\n        var filename = response.headers[\"x-suggested-filename\"];\r\n        var filetype = response.headers[\"x-suggested-filetype\"];\r\n\r\n        // var blob = new Blob([response.data], { type: \"image/png\" });\r\n        FileSaver.saveAs(new Blob([response.data]), filename + \".\" + filetype);\r\n      });\r\n    },\r\n    change_file: function(name) {\r\n      this.active_file = name;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scope>\r\n@import url(\"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\");\r\n\r\n.dropzone-custom-title {\r\n  margin-top: 0;\r\n  color: #00b782;\r\n}\r\n\r\n.subtitle {\r\n  color: #314b5f;\r\n}\r\n</style>\r\n"]}]}