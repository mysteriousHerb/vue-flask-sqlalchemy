{"remainingRequest":"C:\\Users\\My Pc\\Documents\\GitHub\\vue-flask-sqlalchemy-local\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\My Pc\\Documents\\GitHub\\vue-flask-sqlalchemy-local\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\My Pc\\Documents\\GitHub\\vue-flask-sqlalchemy-local\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\My Pc\\Documents\\GitHub\\vue-flask-sqlalchemy-local\\frontend\\src\\components\\todo_rest.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\My Pc\\Documents\\GitHub\\vue-flask-sqlalchemy-local\\frontend\\src\\components\\todo_rest.vue","mtime":1559513276319},{"path":"C:\\Users\\My Pc\\Documents\\GitHub\\vue-flask-sqlalchemy-local\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\My Pc\\Documents\\GitHub\\vue-flask-sqlalchemy-local\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\My Pc\\Documents\\GitHub\\vue-flask-sqlalchemy-local\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\My Pc\\Documents\\GitHub\\vue-flask-sqlalchemy-local\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { setTimeout } from \"timers\";\nexport default {\n  name: \"todo_comp\",\n  data: function data() {\n    return {\n      new_todo: \"\",\n      todos: [{\n        id: 1,\n        content: \"\",\n        done: false\n      }]\n    };\n  },\n  mounted: function mounted() {\n    this.read_todo();\n  },\n  computed: {},\n  methods: {\n    // all the methods will be replaced with REST API call later\n    read_todo: function read_todo() {\n      var _this = this;\n\n      this.axios.get(\"http://localhost:5000/todo_db\").then(function (response) {\n        return _this.todos = response.data;\n      });\n    },\n    update_todo: function update_todo() {\n      var _this2 = this;\n\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n      var content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n      var done = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var delete_ = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var data = {\n        id: id,\n        content: content,\n        done: done,\n        delete: delete_\n      };\n      console.log(data);\n      this.axios.post(\"http://localhost:5000/todo_db\", data).then(function () {\n        return _this2.read_todo();\n      }); //   add a delay to make sure the backend respond\n    },\n    print: function print(data) {\n      console.log(data);\n    }\n  }\n};",{"version":3,"sources":["todo_rest.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAyBA,SAAA,UAAA,QAAA,QAAA;AACA,eAAA;AACA,EAAA,IAAA,EAAA,WADA;AAEA,EAAA,IAAA,EAAA,gBAAA;AACA,WAAA;AACA,MAAA,QAAA,EAAA,EADA;AAEA,MAAA,KAAA,EAAA,CACA;AAAA,QAAA,EAAA,EAAA,CAAA;AAAA,QAAA,OAAA,EAAA,EAAA;AAAA,QAAA,IAAA,EAAA;AAAA,OADA;AAFA,KAAA;AAMA,GATA;AAUA,EAAA,OAAA,EAAA,mBAAA;AACA,SAAA,SAAA;AACA,GAZA;AAaA,EAAA,QAAA,EAAA,EAbA;AAeA,EAAA,OAAA,EAAA;AACA;AACA,IAAA,SAAA,EAAA,qBAAA;AAAA;;AACA,WAAA,KAAA,CACA,GADA,CACA,+BADA,EAEA,IAFA,CAEA,UAAA,QAAA;AAAA,eAAA,KAAA,CAAA,KAAA,GAAA,QAAA,CAAA,IAAA;AAAA,OAFA;AAGA,KANA;AAOA,IAAA,WAAA,EAAA,uBAKA;AAAA;;AAAA,UAJA,EAIA,uEAJA,CAAA,CAIA;AAAA,UAHA,OAGA,uEAHA,EAGA;AAAA,UAFA,IAEA,uEAFA,KAEA;AAAA,UADA,OACA,uEADA,KACA;AACA,UAAA,IAAA,GAAA;AACA,QAAA,EAAA,EAAA,EADA;AACA,QAAA,OAAA,EAAA,OADA;AACA,QAAA,IAAA,EAAA,IADA;AACA,QAAA,MAAA,EAAA;AADA,OAAA;AAGA,MAAA,OAAA,CAAA,GAAA,CAAA,IAAA;AACA,WAAA,KAAA,CACA,IADA,CACA,+BADA,EACA,IADA,EAEA,IAFA,CAEA;AAAA,eAAA,MAAA,CAAA,SAAA,EAAA;AAAA,OAFA,EALA,CAQA;AACA,KArBA;AAsBA,IAAA,KAAA,EAAA,eAAA,IAAA,EAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,IAAA;AACA;AAxBA;AAfA,CAAA","sourcesContent":["<template>\n  <div id=\"todos-vue\">\n    <div>\n      <label>New task:</label>\n      <!-- use v-model for 2-way binding, call method when user press enter @keyup.enter-->\n      <input id=\"new_todo\" v-model=\"new_todo\" placeholder=\"edit me\" @keyup.enter=\"add_todo()\">\n      <button @click=\"update_todo(id=-1, content=new_todo, done=false, delete_=false)\">Add</button>\n    </div>\n    <div>\n      <div v-for=\"(todo) in todos\" :key=\"todo.id\">\n        <label>{{todo.id}}.</label>\n        <!-- we also want to be able to directly update the existing todo, this is handled by v-model, but our database needs to be handled differently-->\n        <input v-model=\"todo.content\" :disabled=\"todo.done\" @keyup.enter=\"update_todo(id=todo.id, content=todo.content, done=todo.done, delete_=false)\">\n        <!-- when click the checkbox, the input becomes disabled -->\n        <!-- use @change rather than @click, the @click event happens too fast that new_val is not sent through  -->\n        <input type=\"checkbox\" v-model=\"todo.done\" @change=\"update_todo(id=todo.id, content=todo.content, done=todo.done, delete_=false)\">\n        <button @click=\"update_todo(id=todo.id, content='', done=true, delete_=true)\">Delete</button>\n      </div>\n      <button @click=\"read_todo()\">read todo</button>\n      <button @click=\"update_todo()\">update todo</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { setTimeout } from \"timers\";\nexport default {\n  name: \"todo_comp\",\n  data: function() {\n    return {\n      new_todo: \"\",\n      todos: [\n        { id: 1, content: \"\", done: false},\n      ],\n    };\n  },\n  mounted: function() {\n    this.read_todo();\n  },\n  computed: {\n  },\n  methods: {\n    // all the methods will be replaced with REST API call later\n    read_todo: function() {\n      this.axios\n        .get(\"http://localhost:5000/todo_db\")\n        .then(response => (this.todos = response.data));\n    },\n    update_todo: function(\n      id = -1,\n      content = \"\",\n      done = false,\n      delete_ = false\n    ) {\n      var data = {\n         id: id, content: content, done: done, delete: delete_ \n      };\n      console.log(data);\n      this.axios\n        .post(\"http://localhost:5000/todo_db\", data)\n        .then(() => this.read_todo());\n      //   add a delay to make sure the backend respond\n    },\n    print:function(data){\n        console.log(data)\n    }\n  }\n};\n</script>"],"sourceRoot":"src/components"}]}