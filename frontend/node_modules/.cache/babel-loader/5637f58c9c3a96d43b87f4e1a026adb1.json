{"remainingRequest":"C:\\Users\\My Pc\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\My Pc\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\My Pc\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\My Pc\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\src\\components\\todo_comp.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\My Pc\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\src\\components\\todo_comp.vue","mtime":1559245458779},{"path":"C:\\Users\\My Pc\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\My Pc\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\My Pc\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\My Pc\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"todo_comp\",\n  data: function data() {\n    return {\n      new_todo: \"\",\n      todos: [{\n        id: 1,\n        content: \"write paper\",\n        done: false\n      }, {\n        id: 2,\n        content: \"read paper\",\n        done: false\n      }, {\n        id: 3,\n        content: \"review paper\",\n        done: false\n      }]\n    };\n  },\n  computed: {\n    // the id of the new todos is the last id + 1\n    new_todo_id: function new_todo_id() {\n      this.todos[this.todos.length - 1].id + 1;\n    }\n  },\n  methods: {\n    // all the methods will be replaced with REST API call later\n    remove_todo: function remove_todo(index) {\n      this.todos.splice(index, 1);\n    },\n    add_todo: function add_todo() {\n      this.todos.push({\n        id: this.new_todo_id,\n        content: this.new_todo,\n        done: false\n      });\n    },\n    // this is to update data to backend\n    update_todo: function update_todo(todo) {\n      console.log(\"new value:\");\n      console.log(todo.id);\n      console.log(todo.content);\n    }\n  }\n};",{"version":3,"sources":["todo_comp.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAsBA,eAAA;AACA,EAAA,IAAA,EAAA,WADA;AAEA,EAAA,IAAA,EAAA,gBAAA;AACA,WAAA;AACA,MAAA,QAAA,EAAA,EADA;AAEA,MAAA,KAAA,EAAA,CACA;AAAA,QAAA,EAAA,EAAA,CAAA;AAAA,QAAA,OAAA,EAAA,aAAA;AAAA,QAAA,IAAA,EAAA;AAAA,OADA,EAEA;AAAA,QAAA,EAAA,EAAA,CAAA;AAAA,QAAA,OAAA,EAAA,YAAA;AAAA,QAAA,IAAA,EAAA;AAAA,OAFA,EAGA;AAAA,QAAA,EAAA,EAAA,CAAA;AAAA,QAAA,OAAA,EAAA,cAAA;AAAA,QAAA,IAAA,EAAA;AAAA,OAHA;AAFA,KAAA;AAQA,GAXA;AAYA,EAAA,QAAA,EAAA;AACA;AACA,IAAA,WAAA,EAAA,uBAAA;AACA,WAAA,KAAA,CAAA,KAAA,KAAA,CAAA,MAAA,GAAA,CAAA,EAAA,EAAA,GAAA,CAAA;AACA;AAJA,GAZA;AAkBA,EAAA,OAAA,EAAA;AACA;AACA,IAAA,WAAA,EAAA,qBAAA,KAAA,EAAA;AACA,WAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,CAAA;AACA,KAJA;AAKA,IAAA,QAAA,EAAA,oBAAA;AACA,WAAA,KAAA,CAAA,IAAA,CAAA;AACA,QAAA,EAAA,EAAA,KAAA,WADA;AAEA,QAAA,OAAA,EAAA,KAAA,QAFA;AAGA,QAAA,IAAA,EAAA;AAHA,OAAA;AAKA,KAXA;AAYA;AACA,IAAA,WAAA,EAAA,qBAAA,IAAA,EAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,YAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,IAAA,CAAA,EAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,IAAA,CAAA,OAAA;AACA;AAjBA;AAlBA,CAAA","sourcesContent":["<template>\n  <div id=\"todos-vue\">\n    <div>\n      <label>New task:</label>\n      <!-- use v-model for 2-way binding, call method when user press enter @keyup.enter-->\n      <input id=\"new_todo\" v-model=\"new_todo\" placeholder=\"edit me\" @keyup.enter=\"add_todo()\">\n      <button @click=\"add_todo()\">Add</button>\n    </div>\n    <div>\n      <div v-for=\"(todo, index) in todos\" :key=\"todo.id\">\n        <label>{{index}}.</label>\n        <!-- we also want to be able to directly update the existing todo, this is handled by v-model, but our database needs to be handled differently-->\n        <input v-model=\"todo.content\" :disabled=\"todo.done\" @keyup.enter=\"update_todo(todo)\">\n        <!-- when click the checkbox, the input becomes disabled -->\n        <input type=\"checkbox\" v-model=\"todo.done\">\n        <button @click=\"remove_todo(index)\">Delete</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"todo_comp\",\n  data: function() {\n    return {\n      new_todo: \"\",\n      todos: [\n        { id: 1, content: \"write paper\", done: false },\n        { id: 2, content: \"read paper\", done: false },\n        { id: 3, content: \"review paper\", done: false }\n      ]\n    };\n  },\n  computed: {\n    // the id of the new todos is the last id + 1\n    new_todo_id: function() {\n      this.todos[this.todos.length - 1].id + 1;\n    }\n  },\n  methods: {\n    // all the methods will be replaced with REST API call later\n    remove_todo: function(index) {\n      this.todos.splice(index, 1);\n    },\n    add_todo: function() {\n      this.todos.push({\n        id: this.new_todo_id,\n        content: this.new_todo,\n        done: false\n      });\n    },\n    // this is to update data to backend\n    update_todo: function(todo) {\n      console.log(\"new value:\");\n      console.log(todo.id);\n      console.log(todo.content);\n    }\n  }\n};\n</script>"],"sourceRoot":"src/components"}]}