{"remainingRequest":"C:\\Users\\herbz\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\herbz\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\herbz\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\herbz\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\herbz\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\src\\components\\todo_rest.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\herbz\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\src\\components\\todo_rest.vue","mtime":1560114412647},{"path":"C:\\Users\\herbz\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1560092139521},{"path":"C:\\Users\\herbz\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1560092197991},{"path":"C:\\Users\\herbz\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1560092137295},{"path":"C:\\Users\\herbz\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1560092139521},{"path":"C:\\Users\\herbz\\Documents\\GitHub\\vue-flask-sqlalchemy\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1560092199284}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"todo_comp\",\n  data: function data() {\n    return {\n      new_todo: \"\",\n      todos: [{\n        id: 1,\n        content: \"\",\n        done: false\n      }]\n    };\n  },\n  mounted: function mounted() {\n    this.read_todo();\n  },\n  computed: {\n    progress: function progress() {\n      var task_done = this.todos.filter(function (todo) {\n        return todo.done;\n      }); // console.log(task_done)\n\n      return task_done.length / this.todos.length * 100;\n    }\n  },\n  methods: {\n    // all the methods will be replaced with REST API call later\n    read_todo: function read_todo() {\n      var _this = this;\n\n      this.axios.get(\"http://localhost:5000/todo_db\").then(function (response) {\n        return _this.todos = response.data;\n      });\n    },\n    update_todo: function update_todo() {\n      var _this2 = this;\n\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n      var content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n      var done = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var delete_ = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var data = {\n        id: id,\n        content: content,\n        done: done,\n        delete: delete_\n      }; // console.log(data);\n\n      this.axios.post(\"http://localhost:5000/todo_db\", data).then(function () {\n        return _this2.read_todo();\n      }); //   add a delay to make sure the backend respond\n    },\n    print: function print(data) {\n      console.log(data);\n    }\n  }\n};",{"version":3,"sources":["todo_rest.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8EA,eAAA;AACA,EAAA,IAAA,EAAA,WADA;AAEA,EAAA,IAAA,EAAA,gBAAA;AACA,WAAA;AACA,MAAA,QAAA,EAAA,EADA;AAEA,MAAA,KAAA,EAAA,CAAA;AAAA,QAAA,EAAA,EAAA,CAAA;AAAA,QAAA,OAAA,EAAA,EAAA;AAAA,QAAA,IAAA,EAAA;AAAA,OAAA;AAFA,KAAA;AAIA,GAPA;AAQA,EAAA,OAAA,EAAA,mBAAA;AACA,SAAA,SAAA;AACA,GAVA;AAWA,EAAA,QAAA,EAAA;AACA,IAAA,QAAA,EAAA,oBAAA;AACA,UAAA,SAAA,GAAA,KAAA,KAAA,CAAA,MAAA,CAAA,UAAA,IAAA;AAAA,eAAA,IAAA,CAAA,IAAA;AAAA,OAAA,CAAA,CADA,CAEA;;AACA,aAAA,SAAA,CAAA,MAAA,GAAA,KAAA,KAAA,CAAA,MAAA,GAAA,GAAA;AACA;AALA,GAXA;AAkBA,EAAA,OAAA,EAAA;AACA;AACA,IAAA,SAAA,EAAA,qBAAA;AAAA;;AACA,WAAA,KAAA,CACA,GADA,CACA,+BADA,EAEA,IAFA,CAEA,UAAA,QAAA;AAAA,eAAA,KAAA,CAAA,KAAA,GAAA,QAAA,CAAA,IAAA;AAAA,OAFA;AAGA,KANA;AAOA,IAAA,WAAA,EAAA,uBAKA;AAAA;;AAAA,UAJA,EAIA,uEAJA,CAAA,CAIA;AAAA,UAHA,OAGA,uEAHA,EAGA;AAAA,UAFA,IAEA,uEAFA,KAEA;AAAA,UADA,OACA,uEADA,KACA;AACA,UAAA,IAAA,GAAA;AACA,QAAA,EAAA,EAAA,EADA;AAEA,QAAA,OAAA,EAAA,OAFA;AAGA,QAAA,IAAA,EAAA,IAHA;AAIA,QAAA,MAAA,EAAA;AAJA,OAAA,CADA,CAOA;;AACA,WAAA,KAAA,CACA,IADA,CACA,+BADA,EACA,IADA,EAEA,IAFA,CAEA;AAAA,eAAA,MAAA,CAAA,SAAA,EAAA;AAAA,OAFA,EARA,CAWA;AACA,KAxBA;AAyBA,IAAA,KAAA,EAAA,eAAA,IAAA,EAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,IAAA;AACA;AA3BA;AAlBA,CAAA","sourcesContent":["<template>\r\n  <div>\r\n    <v-container grid-list-md text-xs-center>\r\n      <v-layout align-center justify-center>\r\n        <v-flex>\r\n          <v-btn large dark color=\"green\" @click=\"read_todo()\">\r\n            <v-icon dark>refresh</v-icon>Fetch database\r\n          </v-btn>\r\n        </v-flex>\r\n        <v-progress-circular :value=\"progress\"></v-progress-circular>\r\n        <span>Progress so far</span>\r\n        <v-flex></v-flex>\r\n      </v-layout>\r\n\r\n      <v-layout align-center justify-center>\r\n        <v-flex xs8>\r\n          <!-- use v-model for 2-way binding, call method when user press enter @keyup.enter-->\r\n          <!-- <v-text-field v-model=\"new_todo\" placeholder=\"edit me\" @keyup.enter=\"add_todo()\"> -->\r\n          <v-text-field\r\n            v-model=\"new_todo\"\r\n            placeholder=\"edit me\"\r\n            label=\"New Task\"\r\n            clearable\r\n            @keydown.enter=\"update_todo(id=-1, content=new_todo, done=false, delete_=false)\"\r\n          ></v-text-field>\r\n        </v-flex>\r\n        <v-flex xs1/>\r\n        <v-flex xs1>\r\n          <v-btn\r\n            small\r\n            fab\r\n            dark\r\n            color=\"teal\"\r\n            @click=\"update_todo(id=-1, content=new_todo, done=false, delete_=false)\"\r\n          >\r\n            <v-icon dark>add</v-icon>\r\n          </v-btn>\r\n        </v-flex>\r\n      </v-layout>\r\n\r\n      <div v-for=\"(todo) in todos\" :key=\"todo.id\">\r\n        <v-layout align-center justify-center>\r\n          <v-flex xs8>\r\n            <!-- we also want to be able to directly update the existing todo, this is handled by v-model, but our database needs to be handled differently-->\r\n            <v-text-field\r\n              v-model=\"todo.content\"\r\n              :label=\"String(todo.id)\"\r\n              :disabled=\"todo.done\"\r\n              @change=\"update_todo(id=todo.id, content=todo.content, done=todo.done, delete_=false)\"\r\n            />\r\n          </v-flex>\r\n          <v-flex xs1>\r\n            <!-- when click the checkbox, the input becomes disabled -->\r\n            <!-- use @change rather than @click, the @click event happens too fast that new_val is not sent through  -->\r\n            <v-switch\r\n              v-model=\"todo.done\"\r\n              label=\"Done?\"\r\n              @change=\"update_todo(id=todo.id, content=todo.content, done=todo.done, delete_=false)\"\r\n            />\r\n          </v-flex>\r\n          <v-flex xs1>\r\n            <v-btn\r\n              small\r\n              fab\r\n              dark\r\n              color=\"error\"\r\n              @click=\"update_todo(id=todo.id, content='', done=true, delete_=true)\"\r\n            >\r\n              <v-icon dark>remove</v-icon>\r\n            </v-btn>\r\n          </v-flex>\r\n        </v-layout>\r\n      </div>\r\n    </v-container>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"todo_comp\",\r\n  data: function() {\r\n    return {\r\n      new_todo: \"\",\r\n      todos: [{ id: 1, content: \"\", done: false }]\r\n    };\r\n  },\r\n  mounted: function() {\r\n    this.read_todo();\r\n  },\r\n  computed: {\r\n    progress: function() {\r\n      var task_done = this.todos.filter(todo => todo.done);\r\n      // console.log(task_done)\r\n      return (task_done.length / this.todos.length) * 100;\r\n    }\r\n  },\r\n  methods: {\r\n    // all the methods will be replaced with REST API call later\r\n    read_todo: function() {\r\n      this.axios\r\n        .get(\"http://localhost:5000/todo_db\")\r\n        .then(response => (this.todos = response.data));\r\n    },\r\n    update_todo: function(\r\n      id = -1,\r\n      content = \"\",\r\n      done = false,\r\n      delete_ = false\r\n    ) {\r\n      var data = {\r\n        id: id,\r\n        content: content,\r\n        done: done,\r\n        delete: delete_\r\n      };\r\n      // console.log(data);\r\n      this.axios\r\n        .post(\"http://localhost:5000/todo_db\", data)\r\n        .then(() => this.read_todo());\r\n      //   add a delay to make sure the backend respond\r\n    },\r\n    print: function(data) {\r\n      console.log(data);\r\n    }\r\n  }\r\n};\r\n</script>"],"sourceRoot":"src/components"}]}